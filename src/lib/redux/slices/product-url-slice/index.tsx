/* Core */
import { createSlice } from '@reduxjs/toolkit';

/* Instruments */
const initialState: ProductUrlPath = {
    url: '',
};

export const productUrlSlice = createSlice({
    name: 'productUrl',
    initialState,
    // The `reducers` field lets us define reducers and generate associated actions
    reducers: {
        to: (state, action) => {
            // Redux Toolkit allows us to write "mutating" logic in reducers. It
            // doesn't actually mutate the state because it uses the Immer library,
            // which detects changes to a "draft state" and produces a brand new
            // immutable state based off those changes
            const path = state.url.split('/');
            if ('/' + path[path.length - 1] !== action.payload) {
                state.url = state.url + action.payload;
            }
        },
        redirect: (state, action) => {
            var path = state.url.split('/');
            if (path.length > 3) {
                path[path.length - 1] = action.payload;
            }
            state.url = path.join('/');
        },
        back: (state) => {
            var path = state.url.split('/');
            if (path.length > 1) {
                path.pop();
            }
            state.url = path.join('/');
        },
        init: (state, action) => {
            state.url = action.payload;
        },
    },
    // The `extraReducers` field lets the slice handle actions defined elsewhere,
    // including actions generated by createAsyncThunk or in other slices.
});

/* Types */
export interface ProductUrlPath {
    url: string;
}
export * from './selector';
